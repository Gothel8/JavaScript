// üü£ Dizi Tanƒ±mƒ±
let meyve = ["elma", "armut", "karpuz"];
console.log("Ba≈üta:", meyve);

// üü£ push() ‚Üí sona eleman ekler
meyve.push("kiraz");
console.log("push:", meyve);

// üü£ pop() ‚Üí sondan eleman siler
meyve.pop();
console.log("pop:", meyve);

// üü£ unshift() ‚Üí ba≈üa eleman ekler
meyve.unshift("limon");
console.log("unshift:", meyve);

// üü£ shift() ‚Üí ba≈ütan eleman siler
meyve.shift();
console.log("shift:", meyve);

// üü£ splice() ‚Üí eleman silip yerine yenisini ekler
// 1. sƒ±radan 1 eleman siler ve yerine 3 yeni meyve ekler
meyve.splice(1, 1, "kayƒ±sƒ±", "√ßilek", "portakal");
console.log("splice:", meyve);

// üü£ slice() ‚Üí belli aralƒ±ktaki elemanlarƒ± alƒ±r (orijinali deƒüi≈ütirmez)
let yeni = meyve.slice(1, 3);
console.log("slice (yeni dizi):", yeni);

console.log("slice (direkt √ßaƒüƒ±rma):", meyve.slice(1, 4));

// üü£ indexOf() ‚Üí elemanƒ±n index'ini bulur
console.log("kayƒ±sƒ± index:", meyve.indexOf("kayƒ±sƒ±"));
console.log("√ºz√ºm index (yok):", meyve.indexOf("uzum"));

// üü£ includes() ‚Üí eleman var mƒ± kontrol eder (true/false)
console.log("kayƒ±sƒ± var mƒ±:", meyve.includes("kayƒ±sƒ±"));
console.log("√ºz√ºm var mƒ±:", meyve.includes("uzum"));

// üü£ forEach() ‚Üí her elemanƒ± d√∂ner, sadece i≈ülem yapar (dizi deƒüi≈ütirmez)
meyve.forEach(function (meyve1) {
  console.log(meyve1 + " g√ºzeldir");
});

meyve.forEach(meyve1 => console.log(meyve.indexOf(meyve1)));

// üü£ map() ‚Üí her elemanƒ± d√∂n√º≈üt√ºr√ºp yeni dizi olu≈üturur
let cumle1 = meyve.map(function (meyve1) {
  return meyve1 + " meyvedir";
});

let cumle2 = meyve.map(meyve1 => meyve1 + " ek≈üidir");

console.log("Orijinal meyve dizisi:", meyve);
console.log("meyvedir dizisi:", cumle1);
console.log("ek≈üidir dizisi:", cumle2);

// üü£ filter() ‚Üí ≈üarta uyan elemanlardan yeni dizi olu≈üturur
let uzunlar = meyve.filter(meyve1 => meyve1.length > 4);
let uzunlar2 = meyve.filter(meyve1 => meyve1.length > 5);

console.log("4'ten uzun olanlar:", uzunlar);
console.log("5'ten uzun olanlar:", uzunlar2);

// üü£ find() ‚Üí ≈üarta uyan ilk elemanƒ± bulur
let ilkK = meyve.find(meyve1 => meyve1.startsWith("k"));
let ilkE = meyve.find(meyve1 => meyve1.startsWith("e"));

console.log("ƒ∞lk 'k' ile ba≈ülayan:", ilkK);
console.log("ƒ∞lk 'e' ile ba≈ülayan:", ilkE);

// üü£ some() ‚Üí en az 1 tanesi ≈üartƒ± saƒülƒ±yorsa true
let varMi = meyve.some(meyve1 => meyve1.length < 5);
let varMi2 = meyve.some(meyve1 => meyve1.length > 5);

console.log("5 harften kƒ±sa var mƒ±:", varMi);
console.log("5 harften uzun var mƒ±:", varMi2);

// üü£ every() ‚Üí hepsi ≈üartƒ± saƒülƒ±yorsa true
let hepsiUzunMu = meyve.every(meyve1 => meyve1.length > 3);
let hepsiLmi = meyve.every(meyve1 => meyve1.startsWith("l"));

console.log("Hepsi 3'ten uzun mu:", hepsiUzunMu);
console.log("Hepsi 'l' ile mi ba≈ülƒ±yor:", hepsiLmi);

// üü£ reduce() ‚Üí t√ºm diziyi bir deƒüere indirger (birle≈ütirme, toplama, vs.)
let meyveCumlesi = meyve.reduce((cumle, meyve1) => cumle + ", " + meyve1);
let meyveCumlesi2 = meyve.reduce((c, m) => c + " meyvedir, " + m);

console.log("reduce ile birle≈ütirilmi≈ü:", meyveCumlesi);
console.log("reduce ile s√ºsl√º birle≈ütirme:", meyveCumlesi2);
